{"version":3,"sources":["actions/ExchangeActionTypes.enum.ts","reducers/ExchangeReducer.ts","store/Store.tsx","restService/RestService.ts","actions/ActionCreator.ts","components/ExchangeRates.tsx","App/App.tsx","root/Root.tsx","index.tsx"],"names":["ExchangeActionTypes","initialExchangeState","currencies","undefined","isFetching","ExchangeReducer","state","action","type","GET_EXCHANGE_RATES_REQUEST","GET_EXCHANGE_RATES_SUCCESS","GET_EXCHANGE_RATES_FAILURE","rootReducer","combineReducers","searchString","RestService","axios","get","error","Promise","reject","getExchangeRates","dispatch","then","response","data","catch","ExchangeRates","props","first","second","INITIAL_SYMBOL","getExchangeRate","React","createRef","handleInputChange","bind","handleKeyDown","baseCurrency","actualCurrency","baseValue","actualValue","setInterval","_","rates","key","value","event","baseVal","target","this","current","calculateValue","valueAsNumber","setState","val","inputValue","Number","parseFloat","toFixed","isNaN","name","result","checkValidity","keyCode","preventDefault","some","v","inputVal","fromCurrency","toCurrency","usdVal","className","onChange","e","handleBaseCurrencySelectChange","renderCurrencyOptions","onFocus","placeholder","onBlur","onKeyDown","ref","min","onClick","calculateExchangeRate","handleActualCurrencySelectChange","Component","connect","store","App","Root","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.caf5c004.chunk.js","sourcesContent":["enum ExchangeActionTypes {\n  GET_EXCHANGE_RATES_REQUEST = 'GET_EXCHANGE_RATES_REQUEST',\n  GET_EXCHANGE_RATES_SUCCESS = 'GET_EXCHANGE_RATES_SUCCESS',\n  GET_EXCHANGE_RATES_FAILURE = 'GET_EXCHANGE_RATES_FAILURE',\n}\n\nexport default ExchangeActionTypes","import { Reducer } from 'redux'\nimport { IExchangeState } from '../store/IStore.interface'\nimport ExchangeActions from '../actions/ExchangeActions.type'\nimport ExchangeActionTypes from '../actions/ExchangeActionTypes.enum'\n\nconst initialExchangeState: IExchangeState = {\n    currencies: undefined,\n    isFetching: false,\n}\n\nconst ExchangeReducer: Reducer<IExchangeState, ExchangeActions> = (\n    state = initialExchangeState,\n    action,\n) => {\n    switch (action.type) {\n        case ExchangeActionTypes.GET_EXCHANGE_RATES_REQUEST: {\n            return {\n                ...state,\n                isFetching: action.isFetching,\n            }\n        }\n        case ExchangeActionTypes.GET_EXCHANGE_RATES_SUCCESS: {\n            return {\n                ...state,\n                currencies: action.currencies,\n                isFetching: action.isFetching,\n            }\n        }\n        case ExchangeActionTypes.GET_EXCHANGE_RATES_FAILURE: {\n            return {\n                ...state,\n                isFetching: action.isFetching,\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport default ExchangeReducer\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport IStoreState from './IStore.interface'\nimport ExchangeReducer from '../reducers/ExchangeReducer'\n\nconst rootReducer = combineReducers<IStoreState>({\n    state: ExchangeReducer,\n})\n\nexport default function configureStore(): Store<IStoreState, any> {\n    const store = createStore(\n        rootReducer,\n        undefined,\n        composeWithDevTools(applyMiddleware(thunk)),\n    )\n\n    return store\n}\n","import axios from 'axios'\nimport IRestServiceInterface from './IRestService.interface'\n\nconst baseUrl = 'https://openexchangerates.org/api/latest.json'\nconst API_KEY = 'fd72932d27da49799dc4fb46285edfec'\nconst allowedCurrencySymbols = 'GBP,EUR,USD,RUB'\nconst searchString = `${baseUrl}?app_id=${API_KEY}&symbols=${allowedCurrencySymbols}`\n\nexport class RestService {\n  getExchangeRates(): Promise<IRestServiceInterface> {\n    try {\n      return axios.get(searchString)\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n}","import {\n    IGetExchangeRatesFailure,\n    IGetExchangeRatesRequest,\n    IGetExchangeRatesSuccess,\n} from './IGetExchangeRates.interface'\nimport ExchangeActionTypes from './ExchangeActionTypes.enum'\nimport { ThunkAction } from 'redux-thunk'\nimport { ActionCreator, Dispatch } from 'redux'\nimport ExchangeActions from './ExchangeActions.type'\nimport { RestService } from '../restService/RestService'\nimport IStoreState from '../store/IStore.interface'\nimport { IExchangeRatesServerResponse } from '../restService/IRestService.interface'\n\nexport const getExchangeRatesRequest = (): IGetExchangeRatesRequest => {\n    return {\n        type: ExchangeActionTypes.GET_EXCHANGE_RATES_REQUEST,\n        isFetching: true,\n    }\n}\n\nexport const getExchangeRatesSuccess = (\n    data: IExchangeRatesServerResponse,\n): IGetExchangeRatesSuccess => {\n    return {\n        type: ExchangeActionTypes.GET_EXCHANGE_RATES_SUCCESS,\n        currencies: data,\n        isFetching: false,\n    }\n}\n\nexport const getExchangeRatesFailure = (): IGetExchangeRatesFailure => {\n    return {\n        type: ExchangeActionTypes.GET_EXCHANGE_RATES_FAILURE,\n        isFetching: false,\n    }\n}\n\nexport const getExchangeRates: ActionCreator<ThunkAction<Promise<any>,\n    IStoreState,\n    null,\n    ExchangeActions>> = () => {\n    return (dispatch: Dispatch) => {\n        dispatch(getExchangeRatesRequest())\n        const dataSource: RestService = new RestService()\n\n        return dataSource\n            .getExchangeRates()\n            .then(response => {\n                dispatch(getExchangeRatesSuccess(response.data))\n            })\n            .catch(() => {\n                dispatch(getExchangeRatesFailure())\n            })\n    }\n}\n","import React, { ChangeEvent, Component } from 'react'\nimport * as _ from 'lodash'\nimport IStoreState, { IExchangeRates } from '../store/IStore.interface'\nimport { getExchangeRates } from '../actions/ActionCreator'\nimport { connect } from 'react-redux'\nimport IRestServiceInterface from '../restService/IRestService.interface'\n\ninterface IProps {\n    getExchangeRate: () => Promise<IRestServiceInterface>,\n    currencies?: IExchangeRates\n    isFetching: boolean\n}\n\ninterface IState {\n    baseCurrency: string\n    actualCurrency: string\n    baseValue?: number\n    actualValue?: number\n}\n\nexport class ExchangeRates extends Component<IProps, IState> {\n    private readonly first: React.RefObject<HTMLInputElement>\n    private readonly second: React.RefObject<HTMLInputElement>\n    private readonly INITIAL_SYMBOL: string = 'EUR'\n\n    constructor(props: IProps) {\n        super(props)\n        this.props.getExchangeRate()\n        this.first = React.createRef()\n        this.second = React.createRef()\n        this.handleInputChange = this.handleInputChange.bind(this)\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.state = {\n            baseCurrency: this.INITIAL_SYMBOL,\n            actualCurrency: this.INITIAL_SYMBOL,\n            baseValue: undefined,\n            actualValue: undefined,\n        }\n    }\n\n    componentDidMount(): void {\n        setInterval(() =>\n            this.props.getExchangeRate(), 10000)\n    }\n\n    renderCurrencyOptions(currencies?: IExchangeRates) {\n        return (currencies && _.map(currencies.rates, (_, key) => {\n            return (<option key={key} value={key}>{key}</option>)\n        }))\n    }\n\n    handleBaseCurrencySelectChange(event: ChangeEvent<HTMLSelectElement>): void {\n        let baseVal = undefined\n        let baseCurrency = event.target.value\n        if (this.second.current) {\n            baseVal = this.calculateValue(this.second.current.valueAsNumber, this.state.actualCurrency, baseCurrency)\n        }\n        this.setState({ baseCurrency, baseValue: baseVal })\n    }\n\n    handleActualCurrencySelectChange(event: ChangeEvent<HTMLSelectElement>): void {\n        let val = undefined\n        let actualCurrency = event.target.value\n        if (this.first.current) {\n            val = this.calculateValue(this.first.current.valueAsNumber, this.state.baseCurrency, actualCurrency)\n        }\n        this.setState({ actualCurrency, actualValue: val })\n    }\n\n    handleInputChange(event: ChangeEvent<HTMLInputElement>): void {\n        const { baseCurrency, actualCurrency } = this.state\n        const inputValue: number = Number(parseFloat(event.target.value).toFixed(2))\n        if (isNaN(inputValue) || event.target.value === undefined) {\n            if (this.first.current && this.second.current) {\n                this.first.current.value = ''\n                this.second.current.value = ''\n            }\n            this.setState({ baseValue: undefined, actualValue: undefined })\n            return\n        }\n\n        if (event.target.name === 'from') {\n            const result = this.calculateValue(inputValue, baseCurrency, actualCurrency)\n            this.setState({ baseValue: Number(inputValue.toFixed(2)), actualValue: Number(result.toFixed(2)) })\n        } else {\n            const result = this.calculateValue(inputValue, actualCurrency, baseCurrency)\n            this.setState({ baseValue: Number(result.toFixed(2)), actualValue: Number(inputValue.toFixed(2)) })\n        }\n    }\n\n    handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>): void {\n        // Allow only numbers with dot\n        let isValid: boolean = this.checkValidity(event.keyCode)\n        if (!isValid && this.first.current && this.second.current) {\n            event.preventDefault()\n            this.first.current.value = ''\n            this.second.current.value = ''\n            this.setState({ baseValue: undefined, actualValue: undefined })\n        }\n    }\n\n    checkValidity(keyCode: number): boolean {\n        const allowedCodes = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 190]\n        return allowedCodes.some((v: number) => v === keyCode)\n    }\n\n    calculateValue(inputVal: number, fromCurrency: string, toCurrency: string): number {\n        const { currencies } = this.props\n        if (fromCurrency === toCurrency) {\n            return inputVal\n        }\n        if (currencies) {\n            const rates = currencies.rates\n            const usdVal = inputVal / rates[fromCurrency]\n            return Number((usdVal * rates[toCurrency]).toFixed(2))\n        }\n        return 0\n    }\n\n    calculateExchangeRate(fromCurrency: string, toCurrency: string): number {\n        const { currencies } = this.props\n        const val = 1\n        if (fromCurrency === toCurrency) {\n            return val\n        }\n        let usdVal = 0\n        if (currencies) {\n            const rates = currencies.rates\n            usdVal = val / rates[fromCurrency]\n            return Number((usdVal * rates[toCurrency]).toFixed(5))\n        }\n        return usdVal\n    }\n\n    render() {\n        const { currencies } = this.props\n        const { baseCurrency, actualCurrency, baseValue, actualValue } = this.state\n        return (\n            <div className={'Container'}>\n                <form className={'Form'}>\n                    <select value={baseCurrency} onChange={(e) => this.handleBaseCurrencySelectChange(e)}>\n                        {this.renderCurrencyOptions(currencies)}\n                    </select>\n                    <input name={'from'} onFocus={(e) => e.target.placeholder = ''}\n                           onBlur={(e) => e.target.placeholder = 'Enter your value'} placeholder={'Enter your value'}\n                           onKeyDown={this.handleKeyDown} value={baseValue}\n                           ref={this.first} min={0}\n                           onChange={this.handleInputChange}\n                           type=\"number\"/>\n                </form>\n                <button className={'Swapper'} onClick={() => {\n                    this.setState({\n                        baseCurrency: actualCurrency,\n                        actualCurrency: baseCurrency,\n                        baseValue: actualValue,\n                        actualValue: baseValue,\n                    })\n                }}>Swap\n                </button>\n                <span\n                    className={'ConvertRate'}>1 {baseCurrency} ~ {this.calculateExchangeRate(baseCurrency, actualCurrency)} {actualCurrency}</span>\n                <form className={'Form'}>\n                    <select value={actualCurrency} onChange={(e) => this.handleActualCurrencySelectChange(e)}>\n                        {this.renderCurrencyOptions(currencies)}\n                    </select>\n                    <input name={'to'} onBlur={(e) => e.target.placeholder = 'Enter your value'}\n                           onFocus={(e) => e.target.placeholder = ''} placeholder={'Enter your value'}\n                           onKeyDown={this.handleKeyDown} value={actualValue} ref={this.second}\n                           onChange={this.handleInputChange}\n                           min={0}\n                           type=\"number\"/>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (store: IStoreState) => {\n    return {\n        currencies: store.state.currencies,\n        isFetching: store.state.isFetching,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        getExchangeRate: () => dispatch(getExchangeRates()),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ExchangeRates)","import React, { Component } from 'react'\nimport './App.css'\nimport ExchangeRates from '../components/ExchangeRates'\n\nclass App extends Component<{}, {}> {\n    render() {\n        return (\n            <div>\n                <ExchangeRates/>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import * as React from 'react'\nimport { Provider } from 'react-redux'\nimport { Store } from 'redux'\n\nimport App from '../App/App'\nimport IStore from '../store/IStore.interface'\n\ninterface IProps {\n    store: Store<IStore>;\n}\n\nconst Root: React.FC<IProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <App/>\n        </Provider>\n    )\n}\n\nexport default Root\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport configureStore from \"./store/Store\";\nimport Root from \"./root/Root\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Root store={store} />,\n  document.getElementById(\"root\") as HTMLElement\n);\n"],"sourceRoot":""}